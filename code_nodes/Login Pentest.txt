
ZAP Spider Attack Tool:
-- The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
---- Server secure_headers changed to "headers['X-Content-Type-Options'] = 'nosniff'"

-- The Cache-Control and Pragma Header is not set
---- Server secure_headers changed to "headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'"
---- Server secure_headers changed to "headers['Pragma'] = 'no-cache'"

SQL Injection:
-- gets properly escaped

OTP Login:
-- Found a loophole with the 2ed Factor Auth:
---- We implemented a feature which enables the user to accept the OTP in the app and get logged in automatically in the browser
---- The feature is just a function which calls the server and asks if the OTP is already accepted and if it is, we get logged in
---- If Alice has the login credentials of Bob and tries to login, Alice will fail at first because of the second factor control
---- But the browser will continue to ask if the second factor was accepted
---- If Bob tries to login now and accepts his OTP, Alice will get logged in as well
---- solution:
------ Implemented Security Tokens and added them to every Request to check if the Request comes from the correct user
------ The attack is now no longer possible, because the server will log out every session that doesnt have the correct Token
